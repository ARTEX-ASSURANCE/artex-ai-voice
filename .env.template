# Artex Agent Environment Variables Template
# Copy this file to .env in the project root (artex_agent/) and fill in your actual values.
# Do NOT commit the .env file to version control.

# --- Core Agent & AI Configuration ---
# Required: Your API key for Google Gemini services.
GEMINI_API_KEY=YOUR_GEMINI_API_KEY_HERE

# --- Database Configuration ---
# Required: Connection string for the MySQL database.
# Format: mysql+aiomysql://USER:PASSWORD@HOST:PORT/DATABASE_NAME
# Example for backend service running in Docker Compose (connects to 'mysql' service on port 3306):
# DATABASE_URL=mysql+aiomysql://artuser:artpass@mysql:3306/artex_extranet
# Example for local development (backend runs on host, connects to MySQL on localhost, e.g., port 3308 if mapped by Docker):
# DATABASE_URL=mysql+aiomysql://artuser:artpass@localhost:3308/artex_extranet
DATABASE_URL=YOUR_DATABASE_URL_HERE

# --- LiveKit Server Configuration (for real-time voice/video interaction features) ---
# Required for LiveKit features: WebSocket URL of your LiveKit server.
LIVEKIT_URL=wss://your-livekit-server-url.livekit.cloud
# Required for LiveKit server-side operations (e.g., token generation): API Key for LiveKit.
LIVEKIT_API_KEY=YOUR_LIVEKIT_API_KEY_HERE
# Required for LiveKit server-side operations: API Secret for LiveKit.
LIVEKIT_API_SECRET=YOUR_LIVEKIT_API_SECRET_HERE
# Optional: Shared secret for verifying incoming LiveKit webhooks. Recommended for production.
# LIVEKIT_WEBHOOK_SECRET=your_webhook_shared_secret_for_verifying_incoming_livekit_webhooks

# --- Google Cloud Text-to-Speech (Optional, for higher quality TTS) ---
# Optional: Path to your Google Cloud service account JSON key file.
# Required if TTS_USE_GOOGLE_CLOUD is true.
# GOOGLE_APPLICATION_CREDENTIALS=path/to/your/google_cloud_service_account_key.json
# Optional: Set to true to use Google Cloud TTS, false to force gTTS fallback. Defaults to true if GOOGLE_APPLICATION_CREDENTIALS is set.
TTS_USE_GOOGLE_CLOUD=true
# Optional: Language code for Google Cloud TTS. Defaults to fr-FR.
TTS_LANG_CODE=fr-FR
# Optional: Voice name for Google Cloud TTS. Defaults to a standard French voice.
TTS_VOICE_NAME=fr-FR-Standard-D
# Optional: Directory for caching generated TTS audio files. Defaults to /tmp/artts_cache.
TTS_CACHE_DIR=/tmp/artts_cache

# --- Application Behavior & Localization ---
# Optional: Desired log level for the application. Defaults to INFO.
# Supported levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO
# Optional: System language and locale settings. Defaults to fr_FR.UTF-8.
# Primarily for ensuring correct handling of text encoding and locale-specific behavior if any.
LANG=fr_FR.UTF-8
# Optional: System timezone. Defaults to UTC.
# Important for consistent timestamping in logs and database if not handled by DB server.
TZ=UTC

# --- CORS Configuration (for FastAPI app) ---
# Optional: Comma-separated list of allowed origins for CORS.
# Required if accessing the API from a different domain/port (e.g., a web frontend).
# Defaults in main.py are for local development (e.g., http://localhost:3000).
# ALLOWED_ORIGINS="http://localhost:3000,https://your-frontend.example.com"

# --- Sentry DSN (Optional, for error tracking) ---
# Required if Sentry integration is enabled in the application.
SENTRY_DSN=YOUR_SENTRY_DSN_HERE
# Optional: Define the environment for Sentry events (e.g., development, staging, production)
# SENTRY_ENVIRONMENT=development


# --- MySQL Configuration (for Docker Compose & Direct Connection) ---
# These are used by docker-compose.yml to set up the MySQL container.
# The backend's DATABASE_URL should use these credentials and the service name 'mysql'
# as hostname, connecting to port 3306 (MySQL's default port inside the Docker network).
# Example DATABASE_URL for backend service in .env (when using docker-compose):
# DATABASE_URL=mysql+aiomysql://artuser:artpass@mysql:3306/artex_extranet

MYSQL_ROOT_PASSWORD=supersecretrootpassword # Change this in your actual .env for security.
MYSQL_DATABASE_NAME=artex_extranet
MYSQL_USER_NAME=artuser
MYSQL_USER_PASSWORD=artpass
# Note: When connecting directly from your host machine (e.g., with a GUI tool) to the
# MySQL container, use port 3308 (as mapped in docker-compose.yml) and localhost as the host.
